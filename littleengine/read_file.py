from littleengine.legacy_mesh import Vertex, Face, Object
from littleengine.legacy_simple_mesh import Object as SimpleObject

class OBJ():
  def __init__(self, name: str = None):
    self.name = "unnamed"

  def read(self, filepath: str) -> list[list, list]:
    with open(filepath, "r") as f:
      lines = f.read().splitlines()
    vertices, faces = [], []
    for line in lines:
      if line:
        prefix, value = line.split(" ", 1)
        if prefix == "o":
          self.name = value
        elif prefix == "v":
          pos = list(map(float, value.split(" ")))
          vertices.append(pos if len(pos) == 3 else pos[:3])
        elif prefix == "f":
          faces.append([int(face.split("/")[0]) - 1 for face in value.split(" ")])
    return vertices, faces
  
  def write(self, path: str, object: SimpleObject) -> None:
    obj_data = []
    obj_data.append('# OBJ file generated by little-engine')
    obj_data.append('# https://github.com/grantcary/little-engine')
    obj_data.append(f"o {self.name}")

    for v in object.vertices:
      obj_data.append(f"v {' '.join([f'{num:.6f}' for num in v])}")
    for v in object.face_map:
      obj_data.append(f"f {' '.join([f'{num + 1}' for num in object.face_map[v]])}")
    obj_data = ('\n').join(obj_data)

    with open(path, 'w') as f:
      f.write(obj_data)

  # classic mesh object, currently does not work
  def compose_object(self) -> Object:
    vertices, faces = [], []
    for v in self.vertices:
      vertices.append(Vertex(*v))
    for f in self.faces:
      faces.append(Face(*[vertices[i] for i in f]))
    for i in range(len(vertices)):
      vertices[i].faces = [f for f in faces if vertices[i] in f.vertices]
    return Object(self.name, vertices, faces)
      
  def __len__(self):
    return len(self.lines)